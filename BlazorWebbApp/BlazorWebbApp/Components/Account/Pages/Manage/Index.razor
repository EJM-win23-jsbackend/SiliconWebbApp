@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorWebbApp.Services
@using Microsoft.AspNetCore.Identity
@using BlazorWebbApp.Data
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext _context
@inject HttpClient Http

<PageTitle>Account details</PageTitle>
<StatusMessage />

<div class="account-forms">

    <EditForm FormName="accountprofileform" Model="AccountProfileForm" OnValidSubmit="OnValidProfileSubmitAsync">

        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alert alert-info">
                @StatusMessage
            </div>
        }
       
        <h2>Account Details</h2>
        <h5>Basic Info</h5>
        <div class="account-profileinfo">
            <div id="form-firstname" class="input-custom">
                <label for="FirstName">Firstname</label>
                <InputText class="input" @bind-Value="AccountProfileForm.FirstName" />
                <ValidationMessage For="() => AccountProfileForm.FirstName" class="field-validation-error" />
            </div>
            <div id="form-lastname" class="input-custom">
                <label for="LastName">Lastname</label>
                <InputText class="input" @bind-Value="AccountProfileForm.LastName" />
                <ValidationMessage For="() => AccountProfileForm.LastName" class="field-validation-error" />
            </div>
            <div id="form-email" class="input-custom">
                <label for="Email">Email</label>
                <InputText class="input" @bind-Value="AccountProfileForm.Email" />
                <ValidationMessage For="() => AccountProfileForm.Email" class="field-validation-error" />
            </div>
            <div id="form-phone" class="input-custom">
                <label for="Phone">Phone</label>
                <InputText class="input" @bind-Value="AccountProfileForm.PhoneNumber" />
                <ValidationMessage For="() => AccountProfileForm.PhoneNumber" class="field-validation-error" />
            </div>
            <div id="form-bio" class="input-custom">
                <label for="Biography">Bio <span>(optional)</span></label>
                <InputTextArea class="bio" @bind-Value="AccountProfileForm.Biography" rows="4" cols="50" style="resize: none; padding: 0.5rem; border-radius: 8px; border: 2px solid var(--color-gray-300); outline: none"
                ></InputTextArea>
            </div>
            <div class="menu-buttons">
                <button id="form-btn-gray" class="btn btn-gray"><span>Cancel</span></button>
                <button id="form-btn-theme" class="btn btn-theme" type="submit"><span>Save changes</span></button>
            </div>
        </div>
    </EditForm>
    <EditForm FormName="accountaddressform" Model="AccountAddressForm" OnValidSubmit="OnValidAddressSubmitAsync">
        <DataAnnotationsValidator />
        <hr>
        <h5>Address</h5>
        <div class="account-address">
            <div id="form-addressline-1" class="input-custom">
                <label for="Addressline_1">Address line 1</label>
                <InputText class="input" @bind-Value="AccountAddressForm.Addressline_1" />
                <ValidationMessage For="() => AccountAddressForm.Addressline_1" class="field-validation-error" />
            </div>
            <div id="form-addressline-2" class="input-custom">
                <label for="Addressline_2">Address line 2 (optional) </label>
                <InputText class="input" @bind-Value="AccountAddressForm.Addressline_2" />
                <ValidationMessage For="() => AccountAddressForm.Addressline_2" class="field-validation-error" />
            </div>
            <div id="form-postalcode" class="input-custom">
                <label for="PostalCode">Postalcode</label>
                <InputText class="input" @bind-Value="AccountAddressForm.PostalCode" />
                <ValidationMessage For="() => AccountAddressForm.PostalCode" class="field-validation-error" />
            </div>
            <div id="form-city" class="input-custom">
                <label for="City">City</label>
                <InputText class="input" @bind-Value="AccountAddressForm.City" />
                <ValidationMessage For="() => AccountAddressForm.City" class="field-validation-error" />
            </div>
            <div class="menu-buttons">
                <button id="form-btn-gray" class="btn btn-gray"><span>Cancel</span></button>
                <button id="form-btn-theme" class="btn btn-theme" type="submit"><span>Save changes</span></button>
            </div>
        </div>
    </EditForm>
</div>


@code {
    public ApplicationUser? User { get; set; }

    public string? userId { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    public AccountProfileModel AccountProfileForm { get; set; } = new AccountProfileModel();

    [SupplyParameterFromForm]
    public AccountAddressModel AccountAddressForm { get; set; } = new AccountAddressModel();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await UserManager.GetUserAsync(HttpContext.User);
            if(user != null)
            {
                User = user;

                if(AccountProfileForm == null)
                {
                    AccountProfileForm = new AccountProfileModel
                    {
                         FirstName = user.FirstName,
                         LastName = user.LastName,
                         Email = user.Email!,
                         PhoneNumber = user.PhoneNumber,
                         Biography = user.Biography
                    };
                }

                if(AccountAddressForm == null)
                {
                    AccountAddressForm = new AccountAddressModel();
                }

                if (user.UserAddress != null)
                {
                    AccountAddressForm = new AccountAddressModel
                    {
                        Addressline_1 = user.UserAddress.AddressLine_1,
                        Addressline_2 = user.UserAddress.AddressLine_2,
                        PostalCode = user.UserAddress.PostalCode,
                        City = user.UserAddress.City
                    };
                }
            }
        }
        catch
        {
            StatusMessage = "An error occured";
            return;
        }

    }

    private async Task OnValidProfileSubmitAsync()
    {
        if (User != null)
        {
            User.FirstName = AccountProfileForm.FirstName;
            User.LastName = AccountProfileForm.LastName;
            User.Email = AccountProfileForm.Email;
            User.PhoneNumber = AccountProfileForm.PhoneNumber;
            User.Biography = AccountProfileForm.Biography;

            var result = await UserManager.UpdateAsync(User);
            if (result.Succeeded)
            {
                StatusMessage = "Profile info updated successfully";
            }
            else
            {
                StatusMessage = "Failed to update profile";
            }
        }
    }

    public async Task OnValidAddressSubmitAsync()
    {
        if(User != null)
        {
            if(User.UserAddress != null)
            {
                User.UserAddress.AddressLine_1 = AccountAddressForm.Addressline_1;
                User.UserAddress.AddressLine_2 = AccountAddressForm.Addressline_2;
                User.UserAddress.PostalCode = AccountAddressForm.PostalCode;
                User.UserAddress.City = AccountAddressForm.City;
            }
            else
            {
                var createAddress = new UserAddress
                {
                    AddressLine_1 = AccountAddressForm.Addressline_1,
                    AddressLine_2 = AccountAddressForm.Addressline_2,
                    PostalCode = AccountAddressForm.PostalCode,
                    City = AccountAddressForm.City
                };
                if(User.UserAddress != null)
                {
                    createAddress.Id = User.UserAddress.Id;
                }

                User.UserAddress = createAddress;
            }

            await UserManager.UpdateAsync(User);

            StatusMessage = "Address updated successfully";
        }
        else
        {
            StatusMessage = "Failed to update address";
        }

    }


    public class AccountProfileModel
    {

        [Display(Name = "First name", Prompt = "Enter your first name")]
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = null!;


        [Display(Name = "last name", Prompt = "Enter your last name")]
        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = null!;


        [Display(Name = "Email address", Prompt = "Enter your email address")]
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email is required")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Your email address is invalid")]
        public string Email { get; set; } = null!;


        [Display(Name = "Phone", Prompt = "Enter your phone")]
        [DataType(DataType.PhoneNumber)]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Bio", Prompt = "Add a short bio...")]
        [DataType(DataType.MultilineText)]
        public string? Biography { get; set; }
    }


    public class AccountAddressModel
    {

            [Display(Name = "Address line 1", Prompt = "Enter your address line")]
            [Required(ErrorMessage = "Address is required")]
            public string Addressline_1 { get; set; } = null!;


            [Display(Name = "Address line 2", Prompt = "Enter your second address line")]
            public string? Addressline_2 { get; set; }


            [Display(Name = "PostalCode", Prompt = "Enter your postalCode")]
            [Required(ErrorMessage = "PostalCode is required")]
            [DataType(DataType.PostalCode)]
            public string PostalCode { get; set; } = null!;


            [Display(Name = "City", Prompt = "Enter your city")]
            [Required(ErrorMessage = "City is required")]
            public string City { get; set; } = null!;
    }


}
