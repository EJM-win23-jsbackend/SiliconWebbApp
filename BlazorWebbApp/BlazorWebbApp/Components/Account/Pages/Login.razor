@page "/Account/Login"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebbApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<section class="signin">
    <div class="container">
        <EditForm FormName="signinform" Model="SignInForm" OnValidSubmit="LoginUser" asp-route-returnUrl="@ReturnUrl" novalidate>

            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert alert-danger">
                    @StatusMessage
                </div>
            }

            <h1>Welcome back</h1>
            <p>Dont have an account yet? <a href="/account/register">Sign up here</a></p>
            <div class="content">
                <div class="form-email input-custom">
                    <label for="Email">Email</label>
                    <InputText class="input" @bind-Value="SignInForm.Email" type="email" />
                </div>
                <div class="form.password input-custom">
                    <label for="Password">Password</label>
                    <InputText class="input" @bind-Value="SignInForm.Password" type="password" />
                </div>
                <div class="form-remember checkbox">
                    <div class="checkbox-group">
                        <div class="input-group">
                            <InputCheckbox @bind-Value="SignInForm.RememberMe" />
                            <label for="RememberMe"><span style="margin-left: 0.5rem;"> Remember me?</span></label>
                        </div>
                    </div>
                </div>
                <button class="form-submit btn btn-theme-s" type="submit">Sign In</button>
                <a href="">Forgot your password?</a>
            </div>
        </EditForm>
    </div>
</section>


@code {

    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public InputModel SignInForm { get; set; } = new();

    public class InputModel
    {

        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email adress", Prompt = "Enter your email adress")]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your password")]
        public string Password { get; set; } = null!;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public async Task LoginUser()
    {
        try
        {
            var result = await SignInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                if (!string.IsNullOrEmpty(ReturnUrl))
                {
                    // Redirect to the ReturnUrl if it's specified
                    RedirectManager.RedirectTo(ReturnUrl);
                }
                else
                {
                    // Redirect to a default page if ReturnUrl is null or empty
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                // If sign-in fails, set an appropriate status message
                StatusMessage = "Wrong email or password";
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the sign-in process
            StatusMessage = "An error occurred";
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}