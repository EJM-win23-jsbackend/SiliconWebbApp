@page "/Account/Register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebbApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign up</PageTitle>

<section class="signup">
    <div class="container">
        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(@StatusMessage))
            {
                <div class="alert alert-danger">
                    @StatusMessage
                </div>
            }

            <h1>Create Account</h1>
            <p>Already have an account? <a href="account/login">Sign in here.</a></p>

            <div class="content">
                <div id="form-firstname" class="input-custom">
                    <label for="Firstname">First name</label>
                    <InputText class="input" @bind-Value="SignUpForm.FirstName"/>
                    <ValidationMessage For="() => SignUpForm.FirstName" class="field-validation-error" />
                </div>
                <div id="form-lastname" class="input-custom">
                    <label for="Lastname">Last name</label>
                    <InputText class="input" @bind-Value="SignUpForm.LastName" />
                    <ValidationMessage For="() => SignUpForm.LastName" class="field-validation-error" />
                </div>
                <div id="form-email" class="input-custom">
                    <label for="Email">Email</label>
                    <InputText class="input" @bind-Value="SignUpForm.Email" type="email" />
                    <ValidationMessage For="() => SignUpForm.Email" class="field-validation-error" />
                </div>
                <div id="form-password" class="input-custom">
                    <label>Password</label>
                    <InputText class="input" @bind-Value="SignUpForm.Password" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" class="field-validation-error" />
                </div>
                <div id="form-confirm" class="input-custom">
                    <label for="ConfirmPassword">Confirm password</label>
                    <InputText class="input" @bind-Value="SignUpForm.ConfirmPassword" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" class="field-validation-error" />
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="SignUpForm.Terms" />
                        <label for="Terms">I agree to the <a>Terms</a> & <a>Conditions</a></label>
                    </div>
                    <ValidationMessage For="() => SignUpForm.Terms" class="field-validation-error" />
                </div>
                <button id="form-button" class="btn btn-theme-s" type="submit">Sign up</button>
            </div>
        </EditForm>
    </div>
</section>


@code{
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; }

    [SupplyParameterFromForm]
    public SignUpModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        // var user = new ApplicationUser
        // {
        //     UserProfile = new UserProfile
        //     {
        //         FirstName = SignUpForm.FirstName,
        //         LastName = SignUpForm.LastName
        //     },
        //     UserName = SignUpForm.Email,
        //     Email = SignUpForm.Email
        // };

        try
        {
            var userExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if(userExists != null)
            {
                StatusMessage = "Account already exists with the same e-mail address.";
                return;
            }

            // var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            // if (!result.Succeeded)
            // {
            //     StatusMessage = "Unable to create account, please try again.";
            //     return;
            // }  
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occured while creating the account";
            return;
        };

        // RedirectManager.RedirectTo("Account/Login");
        // await SignInManager.SignInAsync(user, isPersistent: false);
    }

    public class SignUpModel
    {

        [Display(Name = "First name", Prompt = "Enter your first name")]
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = null!;


        [Display(Name = "last name", Prompt = "Enter your last name")]
        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = null!;


        [Display(Name = "Email address", Prompt = "Enter your email address")]
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email is required")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", ErrorMessage = "Your email address is invalid")]
        public string Email { get; set; } = null!;


        [Display(Name = "Password", Prompt = "Enter password")]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is requried")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "You must enter a strong password")]
        public string Password { get; set; } = null!;


        [Display(Name = "Confirm password", Prompt = "Confirm your password")]
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password must be confirmed")]
        [Compare(nameof(Password), ErrorMessage = "Passwords does not match")]
        public string ConfirmPassword { get; set; } = null!;


        [Display(Name = "I Agree to the Terms & Conditions.")]
        [Required(ErrorMessage = "You must accept the terms and conditions")]
       
        public bool Terms { get; set; } = false;
    }
}
