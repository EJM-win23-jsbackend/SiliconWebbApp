@using BlazorWebbApp.Data
@using BlazorWebbApp.Services
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ProfileImageServices _fileUplaod

<div class="header">
    <div class="container">
        <a class="logo" href="/"><img src="/images/silicon-logotype-light.svg" alt=""></a>
        <div class="menu">
            <nav class="nav">
                <NavLink class="a textLinks" href="/">Home</NavLink>
                <NavLink class="a textLinks" href="/contact">Contact</NavLink>
                <AuthorizeView>
                    <Authorized>
                        <NavLink class="a textLinks" href="/courses">Courses</NavLink>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <NavLink class="a textLinks" href="https://win23backoffice-ejm.azurewebsites.net/">Admin</NavLink>
                    </Authorized>
                </AuthorizeView>
            </nav>
        </div>
        <div class="account-buttons">
            <AuthorizeView>
                <Authorized>
                    <div class="profile">
                        <NavLink href="/account/manage">
                            @if(ProfileImage != null)
                            {
                                <img class="profile-image" src="@ProfileImage" />
                            }
                            else
                            {
                                <img class="profile-image" src="/images/avatar.jpg" />
                            }
                        </NavLink>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-gray" href="/account/login"><i class="fa-solid fa-right-to-bracket"></i><span>Sign in</span></a>
                    <a class="btn btn-theme" href="/account/register"><i class="fa-regular fa-user"></i><span>Sign up</span></a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {

    public ApplicationUser? user { get; set; }

    private string? ProfileImage { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected async override Task OnInitializedAsync()
    {
        user = UserManager.GetUserAsync(HttpContext.User).Result;

        if (user != null)
        {
            ProfileImage = await GetProfileImageAsync();
        }
    }

    private async Task<string> GetProfileImageAsync()
    {
        string userId = user.Id;
        var profileImage = await _fileUplaod.DownloadProfileImageAsync(userId);
        return profileImage;
    }
}
